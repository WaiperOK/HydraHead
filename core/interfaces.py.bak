from abcimport ABC,abstractmethod



from typ in gimport List,Dict,Any,Optional,Union,ByteStr in g,Tuple,Set,Callable







clas sBas eGenerator(ABC):







    @abstractmethod



defgenerate(self,



payload:str,



template_path:str,



obfuscators:List=None,



evas ion_techniques:List=None,



iterations:int=1,



encryption_key:bytes=None,



multi_stage:bool=False,



polymorphic:bool=False)->bytes:



        pas s







@abstractmethod



defget_supported_payloads(self)->List[str]:



        pas s







@abstractmethod



defget_supported_templates(self)->List[str]:



        pas s







clas sBas eObfuscator(ABC):







    @abstractmethod



defobfuscate(self,code:str,



level:str="medium",



iterations:int=1,



markers:Dict[str,str]=None)->str:



        pas s







@abstractmethod



defsupported_formats(self)->List[str]:



        pas s







@abstractmethod



defget_complexity(self)->int:



        pas s







@abstractmethod



defis_compatible_with(self,other_obfuscator:'Bas eObfuscator')->bool:



        pas s







clas sBas eEvas ionTechnique(ABC):







    @abstractmethod



defapply(self,code:str,



target_environments:List[str]=None,



bypas s_level:str="medium",



customize_params:Dict[str,Any]=None)->str:



        pas s







@abstractmethod



defsupported_formats(self)->List[str]:



        pas s







@abstractmethod



defget_evas ion_targets(self)->List[str]:



        pas s







@abstractmethod



defis_compatible_with(self,other_technique:'Bas eEvas ionTechnique')->bool:



        pas s







@abstractmethod



defget_detection_probability(self)->float:



        pas s







clas sBas eLoader(ABC):







    @abstractmethod



defload(self,payload:bytes,



target_process:str=None,



encryption_key:bytes=None,



memory_protection:str="RWX",



stealthy_allocation:bool=False,



hide_threads:bool=False,



anti_memory_scan:bool=False,



**kwargs)->bool:



        pas s







@abstractmethod



defsupported_platforms(self)->List[str]:



        pas s







@abstractmethod



defget_technique_details(self)->Dict[str,Any]:



        pas s







@abstractmethod



defsupports_multi_stage(self)->bool:



        pas s







@abstractmethod



defget_evas ion_capabilities(self)->Set[str]:



        pas s







clas sCha in Technique(ABC):







    @abstractmethod



defadd_technique(self,technique:Any,position:int=-1)->None:



        pas s







@abstractmethod



defexecute_chain(self,payload:bytes,target:str=None,**kwargs)->bool:



        pas s







@abstractmethod



defget_chain(self)->List[Dict[str,Any]]:



        pas s







@abstractmethod



defclear_chain(self)->None:



        pas s